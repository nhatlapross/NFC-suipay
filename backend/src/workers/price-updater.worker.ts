import cron from 'node-cron';
import { getOracleService } from '../services/oracle.service';
import logger from '../utils/logger';

class PriceUpdaterWorker {
  private oracleService = getOracleService();
  private isRunning = false;

  /**
   * Kh·ªüi ƒë·ªông worker c·∫≠p nh·∫≠t t·ªâ gi√° m·ªói ph√∫t
   */
  start(): void {
    if (this.isRunning) {
      logger.warn('Price updater worker is already running');
      return;
    }

    // C·∫≠p nh·∫≠t t·ªâ gi√° m·ªói ph√∫t
    cron.schedule('* * * * *', async () => {
      await this.updatePrice();
    });

    // C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông
    this.updatePrice();

    this.isRunning = true;
    logger.info('üîÑ Price updater worker started - updating every minute');
  }

  /**
   * D·ª´ng worker
   */
  stop(): void {
    this.isRunning = false;
    logger.info('‚èπÔ∏è Price updater worker stopped');
  }

  /**
   * C·∫≠p nh·∫≠t t·ªâ gi√° t·ª´ CoinGecko v√† g·ª≠i l√™n smart contract
   */
  private async updatePrice(): Promise<void> {
    try {
      logger.info('üîÑ Starting price update...');
      
      // L·∫•y t·ªâ gi√° t·ª´ CoinGecko v√† c√°c ngu·ªìn kh√°c
      const newRate = await this.oracleService.fetchAndUpdateRate();
      
      logger.info(`‚úÖ Price updated successfully: ${newRate.usdToVnd.toFixed(0)} VND/USD`);
      logger.info(`   Source: ${newRate.source}`);
      logger.info(`   Timestamp: ${new Date(newRate.timestamp).toISOString()}`);
      
    } catch (error) {
      logger.error('‚ùå Failed to update price:', error);
      
      // Th·ª≠ l·∫•y t·ªâ gi√° hi·ªán t·∫°i t·ª´ smart contract
      try {
        const currentRate = await this.oracleService.getCurrentRate();
        if (currentRate) {
          logger.info(`üìä Current rate from smart contract: ${currentRate.usdToVnd.toFixed(0)} VND/USD`);
        }
      } catch (contractError) {
        logger.error('‚ùå Failed to get current rate from smart contract:', contractError);
      }
    }
  }

  /**
   * C·∫≠p nh·∫≠t t·ªâ gi√° ngay l·∫≠p t·ª©c (manual trigger)
   */
  async updateNow(): Promise<void> {
    logger.info('üîÑ Manual price update triggered...');
    await this.updatePrice();
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i worker
   */
  getStatus(): { isRunning: boolean; lastUpdate?: Date } {
    return {
      isRunning: this.isRunning,
      lastUpdate: this.lastUpdate
    };
  }

  private lastUpdate?: Date;
}

// Singleton instance
let priceUpdaterWorker: PriceUpdaterWorker | null = null;

export function getPriceUpdaterWorker(): PriceUpdaterWorker {
  if (!priceUpdaterWorker) {
    priceUpdaterWorker = new PriceUpdaterWorker();
  }
  return priceUpdaterWorker;
}

export function startPriceUpdaterWorker(): void {
  const worker = getPriceUpdaterWorker();
  worker.start();
}

export function stopPriceUpdaterWorker(): void {
  const worker = getPriceUpdaterWorker();
  worker.stop();
}
